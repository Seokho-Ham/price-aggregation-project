# 해당 테스트는 애플리케이션을 실행 시 저장되는 기본 데이터를 바탕으로 진행됩니다.
# 데이터가 변경될 시 정상적으로 통과가 되지 않을 수 있습니다.

### 1.브랜드 생성
POST http://localhost:8080/brands
Content-Type: application/json

{
  "brandName": "새 브랜드"
}

> {%
    client.test("응답 상태코드가 201이어야 한다.", function (){
        client.assert(response.status === 201, "응답 상태코드가 일치하지 않습니다.")
    });

    client.test("Check data", function (){
        var jsonData = response.body
        client.assert(jsonData.code === "SUCCESS-001")
        client.assert(jsonData.message === "요청 성공")
    });
%}


### 브랜드 수정 - 1번 브랜드의 정보 변경
PUT http://localhost:8080/brands/1
Content-Type: application/json

{
  "brandName": "1번 브랜드의 새로운 이름"
}

> {%
    client.test("응답 상태코드가 200이어야 한다.", function (){
        client.assert(response.status === 200, "응답 상태코드가 일치하지 않습니다.")
    });

    client.test("Check data", function (){
        var jsonData = response.body
        client.assert(jsonData.code === "SUCCESS-001")
        client.assert(jsonData.message === "요청 성공")
    });
%}

### 브랜드 삭제 - 1번 브랜드 삭제
DELETE http://localhost:8080/brands/1

> {%
    client.test("응답 상태코드가 200이어야 한다.", function (){
        client.assert(response.status === 200, "응답 상태코드가 일치하지 않습니다.")
    });

    client.test("Check data", function (){
        var jsonData = response.body
        client.assert(jsonData.code === "SUCCESS-001")
        client.assert(jsonData.message === "요청 성공")
    });
%}


